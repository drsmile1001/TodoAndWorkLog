@typeparam TItem

@if(SlotHeader!=null){
    @SlotHeader(Parent)
}
<ul>
    @foreach (var item in Items)
    {
    <li>
        @if (SlotItem != null)
            @SlotItem(item)
        else 
            @item
        @{
            var children = ChildrenSelector == null
                ? Array.Empty<TItem>()
                : ChildrenSelector(item);
            <AppTreeList TItem="TItem"
                         Items="children"
                         ChildrenSelector="ChildrenSelector!"
                         Parent="item"
                         SlotHeader="SlotHeader"
                         SlotItem="SlotItem"
                         SlotFooter="SlotFooter"
                         />
        }
    </li>
    }
</ul>
@if(SlotFooter!=null){
    @SlotFooter(Parent)
}
@code {
    [Parameter]
    public RenderFragment<TItem?> SlotHeader { get; set; } = item => new RenderFragment(builder=> { });

    [Parameter]
    public RenderFragment<TItem> SlotItem { get; set; } = item => new RenderFragment(builder=> { });

    [Parameter]
    public RenderFragment<TItem?> SlotFooter { get; set; } = item => new RenderFragment(builder=> { });

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = Array.Empty<TItem>();

    [Parameter]
    public TItem? Parent { get; set; }

    [Parameter]
    public Func<TItem, IEnumerable<TItem>>? ChildrenSelector { get; set; } = null;

}
